//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Code\Personal\rule-evaluator-1\RuleEvaluator1\RuleEvaluator1.Parser\Grammars\Predicate1.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RuleEvaluator1.Parser {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="Predicate1Parser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public interface IPredicate1Visitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>Pexpr_Negation</c>
	/// labeled alternative in <see cref="Predicate1Parser.pexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPexpr_Negation([NotNull] Predicate1Parser.Pexpr_NegationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Pexpr_Poperator</c>
	/// labeled alternative in <see cref="Predicate1Parser.pexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPexpr_Poperator([NotNull] Predicate1Parser.Pexpr_PoperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Pexpr_Pfunction</c>
	/// labeled alternative in <see cref="Predicate1Parser.pexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPexpr_Pfunction([NotNull] Predicate1Parser.Pexpr_PfunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Pexpr_Id</c>
	/// labeled alternative in <see cref="Predicate1Parser.pexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPexpr_Id([NotNull] Predicate1Parser.Pexpr_IdContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Pexpr_Bool</c>
	/// labeled alternative in <see cref="Predicate1Parser.pexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPexpr_Bool([NotNull] Predicate1Parser.Pexpr_BoolContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Pexpr_Brackets</c>
	/// labeled alternative in <see cref="Predicate1Parser.pexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPexpr_Brackets([NotNull] Predicate1Parser.Pexpr_BracketsContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Expr_NegationOperation</c>
	/// labeled alternative in <see cref="Predicate1Parser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_NegationOperation([NotNull] Predicate1Parser.Expr_NegationOperationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Expr_FunctionCall</c>
	/// labeled alternative in <see cref="Predicate1Parser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_FunctionCall([NotNull] Predicate1Parser.Expr_FunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Expr_PBinaryOperation</c>
	/// labeled alternative in <see cref="Predicate1Parser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_PBinaryOperation([NotNull] Predicate1Parser.Expr_PBinaryOperationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Expr_Value</c>
	/// labeled alternative in <see cref="Predicate1Parser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_Value([NotNull] Predicate1Parser.Expr_ValueContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Expr_BracketExpression</c>
	/// labeled alternative in <see cref="Predicate1Parser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_BracketExpression([NotNull] Predicate1Parser.Expr_BracketExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Expr_PFunctionCall</c>
	/// labeled alternative in <see cref="Predicate1Parser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_PFunctionCall([NotNull] Predicate1Parser.Expr_PFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Expr_BinaryOperation</c>
	/// labeled alternative in <see cref="Predicate1Parser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_BinaryOperation([NotNull] Predicate1Parser.Expr_BinaryOperationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Expr_UnaryOperation</c>
	/// labeled alternative in <see cref="Predicate1Parser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_UnaryOperation([NotNull] Predicate1Parser.Expr_UnaryOperationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>OperandConstant</c>
	/// labeled alternative in <see cref="Predicate1Parser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOperandConstant([NotNull] Predicate1Parser.OperandConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Variable</c>
	/// labeled alternative in <see cref="Predicate1Parser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariable([NotNull] Predicate1Parser.VariableContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Func_If</c>
	/// labeled alternative in <see cref="Predicate1Parser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunc_If([NotNull] Predicate1Parser.Func_IfContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Func_Lower</c>
	/// labeled alternative in <see cref="Predicate1Parser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunc_Lower([NotNull] Predicate1Parser.Func_LowerContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Func_Upper</c>
	/// labeled alternative in <see cref="Predicate1Parser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunc_Upper([NotNull] Predicate1Parser.Func_UpperContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Func_Trim</c>
	/// labeled alternative in <see cref="Predicate1Parser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunc_Trim([NotNull] Predicate1Parser.Func_TrimContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Func_Abs</c>
	/// labeled alternative in <see cref="Predicate1Parser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunc_Abs([NotNull] Predicate1Parser.Func_AbsContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Func_Ceiling</c>
	/// labeled alternative in <see cref="Predicate1Parser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunc_Ceiling([NotNull] Predicate1Parser.Func_CeilingContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Func_Floor</c>
	/// labeled alternative in <see cref="Predicate1Parser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunc_Floor([NotNull] Predicate1Parser.Func_FloorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Func_Round</c>
	/// labeled alternative in <see cref="Predicate1Parser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunc_Round([NotNull] Predicate1Parser.Func_RoundContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Func_Max</c>
	/// labeled alternative in <see cref="Predicate1Parser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunc_Max([NotNull] Predicate1Parser.Func_MaxContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Func_Min</c>
	/// labeled alternative in <see cref="Predicate1Parser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunc_Min([NotNull] Predicate1Parser.Func_MinContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Func_Avg</c>
	/// labeled alternative in <see cref="Predicate1Parser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunc_Avg([NotNull] Predicate1Parser.Func_AvgContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Func_Case</c>
	/// labeled alternative in <see cref="Predicate1Parser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunc_Case([NotNull] Predicate1Parser.Func_CaseContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Pfunc_Begins</c>
	/// labeled alternative in <see cref="Predicate1Parser.pfunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPfunc_Begins([NotNull] Predicate1Parser.Pfunc_BeginsContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Pfunc_Contains</c>
	/// labeled alternative in <see cref="Predicate1Parser.pfunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPfunc_Contains([NotNull] Predicate1Parser.Pfunc_ContainsContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Pfunc_Ends</c>
	/// labeled alternative in <see cref="Predicate1Parser.pfunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPfunc_Ends([NotNull] Predicate1Parser.Pfunc_EndsContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Pfunc_Isblank</c>
	/// labeled alternative in <see cref="Predicate1Parser.pfunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPfunc_Isblank([NotNull] Predicate1Parser.Pfunc_IsblankContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Pfunc_Isnumber</c>
	/// labeled alternative in <see cref="Predicate1Parser.pfunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPfunc_Isnumber([NotNull] Predicate1Parser.Pfunc_IsnumberContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="Predicate1Parser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumber([NotNull] Predicate1Parser.NumberContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Text</c>
	/// labeled alternative in <see cref="Predicate1Parser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitText([NotNull] Predicate1Parser.TextContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Bool</c>
	/// labeled alternative in <see cref="Predicate1Parser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBool([NotNull] Predicate1Parser.BoolContext context);
}
} // namespace RuleEvaluator1.Parser
