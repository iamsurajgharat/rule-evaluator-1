//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Code\Personal\rule-evaluator-1\RuleEvaluator1\RuleEvaluator1.Parser\Grammars\Predicate1.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RuleEvaluator1.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class Predicate1Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, OPERATOR=23, POPERATORS=24, 
		NUM=25, TEXT=26, BOOL=27, ID=28, WS=29;
	public const int
		RULE_pexpr = 0, RULE_expr = 1, RULE_operand = 2, RULE_func = 3, RULE_pfunction = 4, 
		RULE_constant = 5;
	public static readonly string[] ruleNames = {
		"pexpr", "expr", "operand", "func", "pfunction", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!'", "'('", "')'", "'-'", "'IF'", "','", "'LOWER'", "'UPPER'", 
		"'TRIM'", "'ABS'", "'CEILING'", "'FLOOR'", "'ROUND'", "'MAX'", "'MIN'", 
		"'AVG'", "'CASE'", "'BEGINS'", "'CONTAINS'", "'ENDS'", "'ISBLANK'", "'ISNUMBER'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "OPERATOR", 
		"POPERATORS", "NUM", "TEXT", "BOOL", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Predicate1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Predicate1Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Predicate1Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Predicate1Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PexprContext : ParserRuleContext {
		public PexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pexpr; } }
	 
		public PexprContext() { }
		public virtual void CopyFrom(PexprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pexpr_NegationContext : PexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public PexprContext pexpr() {
			return GetRuleContext<PexprContext>(0);
		}
		public Pexpr_NegationContext(PexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterPexpr_Negation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitPexpr_Negation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPexpr_Negation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pexpr_PoperatorContext : PexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POPERATORS() { return GetToken(Predicate1Parser.POPERATORS, 0); }
		public Pexpr_PoperatorContext(PexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterPexpr_Poperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitPexpr_Poperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPexpr_Poperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pexpr_PfunctionContext : PexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public PfunctionContext pfunction() {
			return GetRuleContext<PfunctionContext>(0);
		}
		public Pexpr_PfunctionContext(PexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterPexpr_Pfunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitPexpr_Pfunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPexpr_Pfunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pexpr_BoolContext : PexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(Predicate1Parser.BOOL, 0); }
		public Pexpr_BoolContext(PexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterPexpr_Bool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitPexpr_Bool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPexpr_Bool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pexpr_BracketsContext : PexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public PexprContext pexpr() {
			return GetRuleContext<PexprContext>(0);
		}
		public Pexpr_BracketsContext(PexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterPexpr_Brackets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitPexpr_Brackets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPexpr_Brackets(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pexpr_IdContext : PexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(Predicate1Parser.ID, 0); }
		public Pexpr_IdContext(PexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterPexpr_Id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitPexpr_Id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPexpr_Id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PexprContext pexpr() {
		PexprContext _localctx = new PexprContext(Context, State);
		EnterRule(_localctx, 0, RULE_pexpr);
		try {
			State = 25;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new Pexpr_NegationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 12; Match(T__0);
				State = 13; pexpr();
				}
				break;
			case 2:
				_localctx = new Pexpr_PoperatorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 14; expr(0);
				State = 15; Match(POPERATORS);
				State = 16; expr(0);
				}
				break;
			case 3:
				_localctx = new Pexpr_PfunctionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 18; pfunction();
				}
				break;
			case 4:
				_localctx = new Pexpr_IdContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 19; Match(ID);
				}
				break;
			case 5:
				_localctx = new Pexpr_BoolContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 20; Match(BOOL);
				}
				break;
			case 6:
				_localctx = new Pexpr_BracketsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 21; Match(T__1);
				State = 22; pexpr();
				State = 23; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expr_NegationOperationContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public PexprContext pexpr() {
			return GetRuleContext<PexprContext>(0);
		}
		public Expr_NegationOperationContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterExpr_NegationOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitExpr_NegationOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_NegationOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_FunctionCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		public Expr_FunctionCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterExpr_FunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitExpr_FunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_FunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_PBinaryOperationContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POPERATORS() { return GetToken(Predicate1Parser.POPERATORS, 0); }
		public Expr_PBinaryOperationContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterExpr_PBinaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitExpr_PBinaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_PBinaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_ValueContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public Expr_ValueContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterExpr_Value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitExpr_Value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_Value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_BracketExpressionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr_BracketExpressionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterExpr_BracketExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitExpr_BracketExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_BracketExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_PFunctionCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public PfunctionContext pfunction() {
			return GetRuleContext<PfunctionContext>(0);
		}
		public Expr_PFunctionCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterExpr_PFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitExpr_PFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_PFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_BinaryOperationContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(Predicate1Parser.OPERATOR, 0); }
		public Expr_BinaryOperationContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterExpr_BinaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitExpr_BinaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_BinaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_UnaryOperationContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr_UnaryOperationContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterExpr_UnaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitExpr_UnaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_UnaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				{
				_localctx = new Expr_UnaryOperationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 28; Match(T__3);
				State = 29; expr(8);
				}
				break;
			case T__0:
				{
				_localctx = new Expr_NegationOperationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 30; Match(T__0);
				State = 31; pexpr();
				}
				break;
			case NUM:
			case TEXT:
			case BOOL:
			case ID:
				{
				_localctx = new Expr_ValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 32; operand();
				}
				break;
			case T__1:
				{
				_localctx = new Expr_BracketExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 33; Match(T__1);
				State = 34; expr(0);
				State = 35; Match(T__2);
				}
				break;
			case T__4:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
				{
				_localctx = new Expr_FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 37; func();
				}
				break;
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
				{
				_localctx = new Expr_PFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 38; pfunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 49;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 47;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new Expr_BinaryOperationContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 41;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 42; Match(OPERATOR);
						State = 43; expr(7);
						}
						break;
					case 2:
						{
						_localctx = new Expr_PBinaryOperationContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 44;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 45; Match(POPERATORS);
						State = 46; expr(6);
						}
						break;
					}
					} 
				}
				State = 51;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
	 
		public OperandContext() { }
		public virtual void CopyFrom(OperandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperandConstantContext : OperandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public OperandConstantContext(OperandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterOperandConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitOperandConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperandConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : OperandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(Predicate1Parser.ID, 0); }
		public VariableContext(OperandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 4, RULE_operand);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
			case TEXT:
			case BOOL:
				_localctx = new OperandConstantContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 52; constant();
				}
				break;
			case ID:
				_localctx = new VariableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 53; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
	 
		public FuncContext() { }
		public virtual void CopyFrom(FuncContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Func_CeilingContext : FuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Func_CeilingContext(FuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterFunc_Ceiling(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitFunc_Ceiling(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_Ceiling(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Func_TrimContext : FuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Func_TrimContext(FuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterFunc_Trim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitFunc_Trim(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_Trim(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Func_LowerContext : FuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Func_LowerContext(FuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterFunc_Lower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitFunc_Lower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_Lower(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Func_UpperContext : FuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Func_UpperContext(FuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterFunc_Upper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitFunc_Upper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_Upper(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Func_MaxContext : FuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Func_MaxContext(FuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterFunc_Max(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitFunc_Max(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_Max(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Func_AbsContext : FuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Func_AbsContext(FuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterFunc_Abs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitFunc_Abs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_Abs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Func_MinContext : FuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Func_MinContext(FuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterFunc_Min(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitFunc_Min(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_Min(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Func_AvgContext : FuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Func_AvgContext(FuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterFunc_Avg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitFunc_Avg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_Avg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Func_RoundContext : FuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Func_RoundContext(FuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterFunc_Round(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitFunc_Round(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_Round(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Func_CaseContext : FuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Func_CaseContext(FuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterFunc_Case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitFunc_Case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_Case(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Func_FloorContext : FuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Func_FloorContext(FuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterFunc_Floor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitFunc_Floor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_Floor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Func_IfContext : FuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public PexprContext pexpr() {
			return GetRuleContext<PexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Func_IfContext(FuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterFunc_If(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitFunc_If(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_If(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 6, RULE_func);
		int _la;
		try {
			int _alt;
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				_localctx = new Func_IfContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; Match(T__4);
				State = 57; Match(T__1);
				State = 58; pexpr();
				State = 59; Match(T__5);
				State = 60; expr(0);
				State = 61; Match(T__5);
				State = 62; expr(0);
				State = 63; Match(T__2);
				}
				break;
			case T__6:
				_localctx = new Func_LowerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; Match(T__6);
				State = 66; Match(T__1);
				State = 67; expr(0);
				State = 68; Match(T__2);
				}
				break;
			case T__7:
				_localctx = new Func_UpperContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 70; Match(T__7);
				State = 71; Match(T__1);
				State = 72; expr(0);
				State = 73; Match(T__2);
				}
				break;
			case T__8:
				_localctx = new Func_TrimContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 75; Match(T__8);
				State = 76; Match(T__1);
				State = 77; expr(0);
				State = 78; Match(T__2);
				}
				break;
			case T__9:
				_localctx = new Func_AbsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 80; Match(T__9);
				State = 81; Match(T__1);
				State = 82; expr(0);
				State = 83; Match(T__2);
				}
				break;
			case T__10:
				_localctx = new Func_CeilingContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 85; Match(T__10);
				State = 86; Match(T__1);
				State = 87; expr(0);
				State = 88; Match(T__2);
				}
				break;
			case T__11:
				_localctx = new Func_FloorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 90; Match(T__11);
				State = 91; Match(T__1);
				State = 92; expr(0);
				State = 93; Match(T__2);
				}
				break;
			case T__12:
				_localctx = new Func_RoundContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 95; Match(T__12);
				State = 96; Match(T__1);
				State = 97; expr(0);
				State = 98; Match(T__2);
				}
				break;
			case T__13:
				_localctx = new Func_MaxContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 100; Match(T__13);
				State = 101; Match(T__1);
				State = 102; expr(0);
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 103; Match(T__5);
					State = 104; expr(0);
					}
					}
					State = 107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__5 );
				State = 109; Match(T__2);
				}
				break;
			case T__14:
				_localctx = new Func_MinContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 111; Match(T__14);
				State = 112; Match(T__1);
				State = 113; expr(0);
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 114; Match(T__5);
					State = 115; expr(0);
					}
					}
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__5 );
				State = 120; Match(T__2);
				}
				break;
			case T__15:
				_localctx = new Func_AvgContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 122; Match(T__15);
				State = 123; Match(T__1);
				State = 124; expr(0);
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 125; Match(T__5);
					State = 126; expr(0);
					}
					}
					State = 129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__5 );
				State = 131; Match(T__2);
				}
				break;
			case T__16:
				_localctx = new Func_CaseContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 133; Match(T__16);
				State = 134; Match(T__1);
				State = 135; expr(0);
				State = 141;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 136; Match(T__5);
						State = 137; expr(0);
						State = 138; Match(T__5);
						State = 139; expr(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 143;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 145; Match(T__5);
				State = 146; expr(0);
				State = 147; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PfunctionContext : ParserRuleContext {
		public PfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pfunction; } }
	 
		public PfunctionContext() { }
		public virtual void CopyFrom(PfunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pfunc_ContainsContext : PfunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Pfunc_ContainsContext(PfunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterPfunc_Contains(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitPfunc_Contains(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPfunc_Contains(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pfunc_EndsContext : PfunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Pfunc_EndsContext(PfunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterPfunc_Ends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitPfunc_Ends(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPfunc_Ends(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pfunc_BeginsContext : PfunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Pfunc_BeginsContext(PfunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterPfunc_Begins(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitPfunc_Begins(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPfunc_Begins(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pfunc_IsnumberContext : PfunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Pfunc_IsnumberContext(PfunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterPfunc_Isnumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitPfunc_Isnumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPfunc_Isnumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pfunc_IsblankContext : PfunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Pfunc_IsblankContext(PfunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterPfunc_Isblank(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitPfunc_Isblank(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPfunc_Isblank(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PfunctionContext pfunction() {
		PfunctionContext _localctx = new PfunctionContext(Context, State);
		EnterRule(_localctx, 8, RULE_pfunction);
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				_localctx = new Pfunc_BeginsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 151; Match(T__17);
				State = 152; Match(T__1);
				State = 153; expr(0);
				State = 154; Match(T__5);
				State = 155; expr(0);
				State = 156; Match(T__2);
				}
				break;
			case T__18:
				_localctx = new Pfunc_ContainsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; Match(T__18);
				State = 159; Match(T__1);
				State = 160; expr(0);
				State = 161; Match(T__5);
				State = 162; expr(0);
				State = 163; Match(T__2);
				}
				break;
			case T__19:
				_localctx = new Pfunc_EndsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 165; Match(T__19);
				State = 166; Match(T__1);
				State = 167; expr(0);
				State = 168; Match(T__5);
				State = 169; expr(0);
				State = 170; Match(T__2);
				}
				break;
			case T__20:
				_localctx = new Pfunc_IsblankContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 172; Match(T__20);
				State = 173; Match(T__1);
				State = 174; expr(0);
				State = 175; Match(T__2);
				}
				break;
			case T__21:
				_localctx = new Pfunc_IsnumberContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 177; Match(T__21);
				State = 178; Match(T__1);
				State = 179; expr(0);
				State = 180; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
	 
		public ConstantContext() { }
		public virtual void CopyFrom(ConstantContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(Predicate1Parser.NUM, 0); }
		public NumberContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(Predicate1Parser.BOOL, 0); }
		public BoolContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TextContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(Predicate1Parser.TEXT, 0); }
		public TextContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPredicate1Listener typedListener = listener as IPredicate1Listener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPredicate1Visitor<TResult> typedVisitor = visitor as IPredicate1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 10, RULE_constant);
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
				_localctx = new NumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 184; Match(NUM);
				}
				break;
			case TEXT:
				_localctx = new TextContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 185; Match(TEXT);
				}
				break;
			case BOOL:
				_localctx = new BoolContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 186; Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1F', '\xC0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '\x1C', '\n', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '*', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x32', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x35', '\v', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x39', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', 'l', '\n', '\x5', '\r', 
		'\x5', '\xE', '\x5', 'm', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', 'w', '\n', 
		'\x5', '\r', '\x5', '\xE', '\x5', 'x', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', 
		'\x5', '\x82', '\n', '\x5', '\r', '\x5', '\xE', '\x5', '\x83', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', 
		'\x5', '\x90', '\n', '\x5', '\r', '\x5', '\xE', '\x5', '\x91', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x98', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\xB9', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\xBE', '\n', '\a', '\x3', '\a', '\x2', 
		'\x3', '\x4', '\b', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', '\x2', 
		'\x2', '\xDB', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x4', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x97', '\x3', '\x2', '\x2', '\x2', '\n', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', 
		'\a', '\x3', '\x2', '\x2', '\xF', '\x1C', '\x5', '\x2', '\x2', '\x2', 
		'\x10', '\x11', '\x5', '\x4', '\x3', '\x2', '\x11', '\x12', '\a', '\x1A', 
		'\x2', '\x2', '\x12', '\x13', '\x5', '\x4', '\x3', '\x2', '\x13', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x1C', '\x5', '\n', '\x6', '\x2', 
		'\x15', '\x1C', '\a', '\x1E', '\x2', '\x2', '\x16', '\x1C', '\a', '\x1D', 
		'\x2', '\x2', '\x17', '\x18', '\a', '\x4', '\x2', '\x2', '\x18', '\x19', 
		'\x5', '\x2', '\x2', '\x2', '\x19', '\x1A', '\a', '\x5', '\x2', '\x2', 
		'\x1A', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1B', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', '\x10', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', '\x16', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', 
		'\b', '\x3', '\x1', '\x2', '\x1E', '\x1F', '\a', '\x6', '\x2', '\x2', 
		'\x1F', '*', '\x5', '\x4', '\x3', '\n', ' ', '!', '\a', '\x3', '\x2', 
		'\x2', '!', '*', '\x5', '\x2', '\x2', '\x2', '\"', '*', '\x5', '\x6', 
		'\x4', '\x2', '#', '$', '\a', '\x4', '\x2', '\x2', '$', '%', '\x5', '\x4', 
		'\x3', '\x2', '%', '&', '\a', '\x5', '\x2', '\x2', '&', '*', '\x3', '\x2', 
		'\x2', '\x2', '\'', '*', '\x5', '\b', '\x5', '\x2', '(', '*', '\x5', '\n', 
		'\x6', '\x2', ')', '\x1D', '\x3', '\x2', '\x2', '\x2', ')', ' ', '\x3', 
		'\x2', '\x2', '\x2', ')', '\"', '\x3', '\x2', '\x2', '\x2', ')', '#', 
		'\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', 
		'(', '\x3', '\x2', '\x2', '\x2', '*', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\f', '\b', '\x2', '\x2', ',', '-', '\a', '\x19', '\x2', '\x2', 
		'-', '\x32', '\x5', '\x4', '\x3', '\t', '.', '/', '\f', '\a', '\x2', '\x2', 
		'/', '\x30', '\a', '\x1A', '\x2', '\x2', '\x30', '\x32', '\x5', '\x4', 
		'\x3', '\b', '\x31', '+', '\x3', '\x2', '\x2', '\x2', '\x31', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x35', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x5', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x39', '\x5', '\f', '\a', '\x2', '\x37', 
		'\x39', '\a', '\x1E', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', '\a', '\x3', 
		'\x2', '\x2', '\x2', ':', ';', '\a', '\a', '\x2', '\x2', ';', '<', '\a', 
		'\x4', '\x2', '\x2', '<', '=', '\x5', '\x2', '\x2', '\x2', '=', '>', '\a', 
		'\b', '\x2', '\x2', '>', '?', '\x5', '\x4', '\x3', '\x2', '?', '@', '\a', 
		'\b', '\x2', '\x2', '@', '\x41', '\x5', '\x4', '\x3', '\x2', '\x41', '\x42', 
		'\a', '\x5', '\x2', '\x2', '\x42', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\a', '\t', '\x2', '\x2', '\x44', '\x45', '\a', '\x4', 
		'\x2', '\x2', '\x45', '\x46', '\x5', '\x4', '\x3', '\x2', '\x46', 'G', 
		'\a', '\x5', '\x2', '\x2', 'G', '\x98', '\x3', '\x2', '\x2', '\x2', 'H', 
		'I', '\a', '\n', '\x2', '\x2', 'I', 'J', '\a', '\x4', '\x2', '\x2', 'J', 
		'K', '\x5', '\x4', '\x3', '\x2', 'K', 'L', '\a', '\x5', '\x2', '\x2', 
		'L', '\x98', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', '\v', '\x2', 
		'\x2', 'N', 'O', '\a', '\x4', '\x2', '\x2', 'O', 'P', '\x5', '\x4', '\x3', 
		'\x2', 'P', 'Q', '\a', '\x5', '\x2', '\x2', 'Q', '\x98', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'S', '\a', '\f', '\x2', '\x2', 'S', 'T', '\a', '\x4', 
		'\x2', '\x2', 'T', 'U', '\x5', '\x4', '\x3', '\x2', 'U', 'V', '\a', '\x5', 
		'\x2', '\x2', 'V', '\x98', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', 
		'\r', '\x2', '\x2', 'X', 'Y', '\a', '\x4', '\x2', '\x2', 'Y', 'Z', '\x5', 
		'\x4', '\x3', '\x2', 'Z', '[', '\a', '\x5', '\x2', '\x2', '[', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', '\xE', '\x2', '\x2', ']', 
		'^', '\a', '\x4', '\x2', '\x2', '^', '_', '\x5', '\x4', '\x3', '\x2', 
		'_', '`', '\a', '\x5', '\x2', '\x2', '`', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x62', '\a', '\xF', '\x2', '\x2', '\x62', '\x63', '\a', 
		'\x4', '\x2', '\x2', '\x63', '\x64', '\x5', '\x4', '\x3', '\x2', '\x64', 
		'\x65', '\a', '\x5', '\x2', '\x2', '\x65', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'g', '\a', '\x10', '\x2', '\x2', 'g', 'h', '\a', '\x4', 
		'\x2', '\x2', 'h', 'k', '\x5', '\x4', '\x3', '\x2', 'i', 'j', '\a', '\b', 
		'\x2', '\x2', 'j', 'l', '\x5', '\x4', '\x3', '\x2', 'k', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\a', '\x5', '\x2', '\x2', 'p', '\x98', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'r', '\a', '\x11', '\x2', '\x2', 'r', 's', '\a', 
		'\x4', '\x2', '\x2', 's', 'v', '\x5', '\x4', '\x3', '\x2', 't', 'u', '\a', 
		'\b', '\x2', '\x2', 'u', 'w', '\x5', '\x4', '\x3', '\x2', 'v', 't', '\x3', 
		'\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', 
		'\x2', '\x2', '\x2', 'z', '{', '\a', '\x5', '\x2', '\x2', '{', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '|', '}', '\a', '\x12', '\x2', '\x2', '}', 
		'~', '\a', '\x4', '\x2', '\x2', '~', '\x81', '\x5', '\x4', '\x3', '\x2', 
		'\x7F', '\x80', '\a', '\b', '\x2', '\x2', '\x80', '\x82', '\x5', '\x4', 
		'\x3', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x86', '\a', '\x5', '\x2', '\x2', '\x86', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\a', '\x13', '\x2', '\x2', 
		'\x88', '\x89', '\a', '\x4', '\x2', '\x2', '\x89', '\x8F', '\x5', '\x4', 
		'\x3', '\x2', '\x8A', '\x8B', '\a', '\b', '\x2', '\x2', '\x8B', '\x8C', 
		'\x5', '\x4', '\x3', '\x2', '\x8C', '\x8D', '\a', '\b', '\x2', '\x2', 
		'\x8D', '\x8E', '\x5', '\x4', '\x3', '\x2', '\x8E', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x94', '\a', '\b', '\x2', '\x2', '\x94', '\x95', 
		'\x5', '\x4', '\x3', '\x2', '\x95', '\x96', '\a', '\x5', '\x2', '\x2', 
		'\x96', '\x98', '\x3', '\x2', '\x2', '\x2', '\x97', ':', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x43', '\x3', '\x2', '\x2', '\x2', '\x97', 'H', 
		'\x3', '\x2', '\x2', '\x2', '\x97', 'M', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'R', '\x3', '\x2', '\x2', '\x2', '\x97', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\\', '\x3', '\x2', '\x2', '\x2', '\x97', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x66', '\x3', '\x2', '\x2', '\x2', '\x97', 'q', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '|', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x98', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9A', '\a', '\x14', '\x2', '\x2', '\x9A', '\x9B', '\a', 
		'\x4', '\x2', '\x2', '\x9B', '\x9C', '\x5', '\x4', '\x3', '\x2', '\x9C', 
		'\x9D', '\a', '\b', '\x2', '\x2', '\x9D', '\x9E', '\x5', '\x4', '\x3', 
		'\x2', '\x9E', '\x9F', '\a', '\x5', '\x2', '\x2', '\x9F', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', '\x15', '\x2', '\x2', '\xA1', 
		'\xA2', '\a', '\x4', '\x2', '\x2', '\xA2', '\xA3', '\x5', '\x4', '\x3', 
		'\x2', '\xA3', '\xA4', '\a', '\b', '\x2', '\x2', '\xA4', '\xA5', '\x5', 
		'\x4', '\x3', '\x2', '\xA5', '\xA6', '\a', '\x5', '\x2', '\x2', '\xA6', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x16', '\x2', 
		'\x2', '\xA8', '\xA9', '\a', '\x4', '\x2', '\x2', '\xA9', '\xAA', '\x5', 
		'\x4', '\x3', '\x2', '\xAA', '\xAB', '\a', '\b', '\x2', '\x2', '\xAB', 
		'\xAC', '\x5', '\x4', '\x3', '\x2', '\xAC', '\xAD', '\a', '\x5', '\x2', 
		'\x2', '\xAD', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', 
		'\x17', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x4', '\x2', '\x2', '\xB0', 
		'\xB1', '\x5', '\x4', '\x3', '\x2', '\xB1', '\xB2', '\a', '\x5', '\x2', 
		'\x2', '\xB2', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', 
		'\x18', '\x2', '\x2', '\xB4', '\xB5', '\a', '\x4', '\x2', '\x2', '\xB5', 
		'\xB6', '\x5', '\x4', '\x3', '\x2', '\xB6', '\xB7', '\a', '\x5', '\x2', 
		'\x2', '\xB7', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB9', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBE', '\a', '\x1B', '\x2', '\x2', '\xBB', 
		'\xBE', '\a', '\x1C', '\x2', '\x2', '\xBC', '\xBE', '\a', '\x1D', '\x2', 
		'\x2', '\xBD', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\xE', '\x1B', ')', '\x31', '\x33', 
		'\x38', 'm', 'x', '\x83', '\x91', '\x97', '\xB8', '\xBD',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace RuleEvaluator1.Parser
